@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using QuickShop.Client.Authentication
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject AuthenticationStateProvider authStateProvider

<PageTitle>Iniciar Sesión</PageTitle>



<div class="container">
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="LoginUser" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrEmpty(Message))
                {
                    <div class="alert alert-warning">@Message</div>
                }
                <div class="card">
                    <div class="card-header">Por favor ingresa tus datos</div>
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Correo Electrónico</label>
                            <InputText @bind-Value="LoginUser.Email" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Contraseña</label>
                            <InputText @bind-Value="LoginUser.Password" class="form-control" type="password"></InputText>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button type="submit" class="btn btn-primary">Iniciar Sesión</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<div class="text-danger">
    <span>@Message</span>
</div>

@code {
    private LoginUser LoginUser { get; set; } = new();
    private string? Message;

    private async Task HandleLogin()
    {
        Message = string.Empty;
        var response = await httpClient.PostAsJsonAsync("login", LoginUser);
        if (!response.IsSuccessStatusCode)
        {
            Message = "Invalid Credentials";
            return;
        }

        var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
        if (string.IsNullOrEmpty(result!.AccessToken)) return;

        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", result.AccessToken);
        var getUserClaims = await httpClient.GetAsync("manage/info");
        if (!getUserClaims.IsSuccessStatusCode) return;


        var userDetails = await getUserClaims.Content.ReadFromJsonAsync<UserDetails>();
        var authenticationModel = new AuthenticationModel() 
        { 
            Token = result.AccessToken, 
            RefreshToken = result.RefreshToken, 
            Username = userDetails!.Email
        };

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(authenticationModel);
        NavigationManager.NavigateTo("/store");


    }
}
